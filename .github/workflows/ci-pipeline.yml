name: CI Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  SLACK_CHANNEL: "#ci-cd-tests"
  SUCCESS_COLOR: "#36a64f"
  FAILURE_COLOR: "#ff0000"
  TEST_PROFILE: "regression"
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  GITHUB_JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build
        run: echo "Building..."

  test:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: mcr.microsoft.com/playwright:v1.48.1-focal
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run tests
        run: |
          npm run test

      - name: List Playwright report directory and test results
        if: always()
        run: |
          ls -l playwright-report
          ls -l artifacts/test-results.json

      - name: Upload test results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            test-results.json
            playwright-report/**     

  notify:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies for Slack notification
        run: npm ci

      - name: Download test reports and payload artifact
        uses: actions/download-artifact@v4
        with:
          name: test-reports  # Name of the artifact from the `test` job
          path: ./artifacts   # Path where you want to download the artifact

      - name: Verify downloaded files
        run: |
          ls -lR ./artifacts  # Verify downloaded files recursively
          cat ./artifacts/test-results.json  # Verify the contents of the test-results.json          

      - name: Send Slack notification
        run: |
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "Error: SLACK_WEBHOOK_URL is not set or empty."
            exit 1
          fi
          node src/utils/notifySlack.js
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Ensure this secret is set in your repository settings
          GITHUB_JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}